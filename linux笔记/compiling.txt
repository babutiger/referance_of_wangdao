#编译

##Makefile / make命令
 根据文件**更新时间**选择性编译，前提是确定依赖关系。 文件如下：  

	a.out: strstr.o link_list.o  	//a.out依赖于俩.o文件
		gcc strstr.o link_list.o 		  //执行句，任意内容都行
	strstr.o: strstr.c link_list.h	  //只要冒号左边的更新时间晚于右边任意一个
		gcc strstr.c -c			//注意执行句必须前面加tab
	link_list.o: link_list.h link_list.c
		gcc link_list.c -c


##动态库和静态库

###**区别和优势：**

***静态库***：本质是.o文件（只编译未链接）的归档，在使用时会copy一份，和其他代码链接在一起。缺点是，如果多个文件调用该库，则会copy很多份浪费空间。优点是方便（可以随时解压）。  

***动态库***：动态库不参与与其他代码的链接，只有在代码实际运行时才调用该库，优点是复用率高，缺点是每次更改需要重新编译。


###**创建动态库**：
`gcc -c -fPIC *.c`  ---  请善用通配符～ （－c代表只编译不连接，用于制作库）   
`gcc -shared -o libadd.so add.o`  ---  把add.o，编译为动态库    
***注意：***（－fpic代表position idepedent code，产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意
  位置，都可以正确的执行。）
  
**注：**动态库后缀so，  库必须以lib命名前缀以供搜索！ 

###**创建静态库**：
`ar crsv libadd.a add.o`  
注： 解压请查询`ar`命令

###如何在编译时告诉gcc去哪里找库

`-I headpath`  ----  手动添加头文件，***注意***，I和路径间没有空格！  
`-L libpath`   ----  手动加载**库路径**（必须和小l同时试用）  
`-l libname`  －－－－ 手动加载**库**（同样没有空格）***（不包括lib前缀！）***  

