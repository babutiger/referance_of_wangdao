多态
===

[TOC]


###为啥需要多态？
在基类中，需要定下一个抽象的函数，这个函数在派生类中具体实现。   
例如：线程为基类，生产者为派生类，那么线程的实现函数必须先要写在基类中“占个位子”，（否则基类中的strat方法没人可以调用啊……）， 然后再在生产者类中具体实现这个线程函数。这个过程是派生类的函数`覆盖`了基类的函数，所以多态也
叫做函数的重写。

我感觉，其实虚函数就是在基类里面占个位子，以免编译通不过……

多态的精髓，是用基类的指针，对各个派生类统一化的操作。

---

###多态的实现－－动态绑定（dynamic binding）
背景：编译时，编译器把函数名转化为函数的入口地址，这叫`静态绑定`。

####什么是动态绑定
1. 用virtual标记`基类`中的函数为`虚函数`（虚拟的抽象函数）
2. 在`派生类`中，定义一个`同名同参数`的实现函数。（返回值兼容即可）（可以有多个派生类）
3. 在编译时，遇到virtual标记的函数，编译器不会直接指定该函数的地址，而是建立一张`虚函数表`（记录所有虚函数的地址），并生成一个虚指针指向此表。
4. 虚函数表中，列出了本类所有的虚函数，以及对应的代码地址。每个派生类都在继承时，生成一份副本。
5. 派生类继承基类的虚函数表后，修改其中表项的值，就是用重新定义的虚函数的地址去`覆盖`基类中同名虚函数的地址。
6. 也就是说，每个派生类通过虚指针调用虚函数时，都会调用该派生类`自己定义的`虚函数，由此实现了`多态`。
7. 注意，虚函数有继承性，对于派生类中未重新定义的虚函数，则表项中的地址依旧指向父类的虚函数代码，不做改变。

####动态绑定的条件：
1. 用**基类**的**`指针`或`引用`**指向**派生类**的对象
2. 基类中的virtual函数与派生类中的函数同名同参数

####如果派生类中的函数名称与基类相同，参数不同怎么办？
那就会触发继承函数的`隐藏`，而不是多态。



####参考网址
http://blog.csdn.net/haoel/article/details/1948051
http://blog.csdn.net/haoel/article/details/3081328